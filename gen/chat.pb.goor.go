// Code generated by protoc-gen-goor. DO NOT EDIT.
package gen

import (
	context "context"
	grain "github.com/jaym/go-orleans/grain"
	descriptor "github.com/jaym/go-orleans/grain/descriptor"
	generic "github.com/jaym/go-orleans/grain/generic"
	services "github.com/jaym/go-orleans/grain/services"
	time "time"
)

type ChatRoomGrainServices interface {
	CoreGrainServices() services.CoreGrainServices
	NotifyListenObservers(ctx context.Context, observers []grain.RegisteredObserver, val *ChatMessage) error
	ListListenObservers(ctx context.Context) ([]grain.RegisteredObserver, error)
	AddListenObserver(ctx context.Context, observer grain.Identity, registrationTimeout time.Duration, req *ListenRequest) error
	RemoveListenObserver(ctx context.Context, observer grain.Identity) error
}

type impl_ChatRoomGrainServices struct {
	observerManager services.GrainObserverManager
	coreServices    services.CoreGrainServices
}

func (m *impl_ChatRoomGrainServices) CoreGrainServices() services.CoreGrainServices {
	return m.coreServices
}

func (m *impl_ChatRoomGrainServices) NotifyListenObservers(ctx context.Context, observers []grain.RegisteredObserver, val *ChatMessage) error {
	return m.observerManager.Notify(ctx, ChatRoomGrain_GrainDesc.Observables[0].Name, observers, val)
}

func (m *impl_ChatRoomGrainServices) ListListenObservers(ctx context.Context) ([]grain.RegisteredObserver, error) {
	return m.observerManager.List(ctx, ChatRoomGrain_GrainDesc.Observables[0].Name)
}

func (m *impl_ChatRoomGrainServices) AddListenObserver(ctx context.Context, observer grain.Identity, registrationTimeout time.Duration, req *ListenRequest) error {
	_, err := m.observerManager.Add(ctx, ChatRoomGrain_GrainDesc.Observables[0].Name, observer, registrationTimeout, req)
	return err
}

func (m *impl_ChatRoomGrainServices) RemoveListenObserver(ctx context.Context, observer grain.Identity) error {
	return m.observerManager.Remove(ctx, ChatRoomGrain_GrainDesc.Observables[0].Name, observer)
}

type ChatRoomGrainActivator interface {
	Activate(ctx context.Context, identity grain.Identity, services ChatRoomGrainServices) (ChatRoomGrain, error)
}

func RegisterChatRoomGrainActivator(registrar descriptor.Registrar, activator ChatRoomGrainActivator) {
	registrar.Register(&ChatRoomGrain_GrainDesc, activator)
}

type ChatRoomGrain interface {
	grain.GrainReference
	Join(ctx context.Context, req *JoinRequest) (*JoinResponse, error)
	RegisterListenObserver(ctx context.Context, observer grain.Identity, registrationTimeout time.Duration, req *ListenRequest) error
	UnsubscribeListenObserver(ctx context.Context, observer grain.Identity) error
	Publish(ctx context.Context, req *ChatMessage) (*PublishResponse, error)
	Leave(ctx context.Context, req *LeaveRequest) (*LeaveResponse, error)
}

type ChatRoomGrainListenObserver interface {
	grain.GrainReference
	OnNotifyListen(ctx context.Context, req *ChatMessage) error
}

func CreateChatRoomGrainListenStream(g *generic.Grain) (*ChatRoomGrainListenStream, error) {
	desc := ChatRoomGrain_GrainDesc.Observables[0]
	genericStream, err := g.CreateStream(ChatRoomGrain_GrainDesc.GrainType, desc.Name)
	if err != nil {
		return nil, err
	}

	stream := &ChatRoomGrainListenStream{
		Stream: genericStream,
		c:      make(chan ChatRoomGrainListenStreamMessage, 10),
	}

	go func() {
		c := stream.Stream.C()
		for {
			select {
			case <-stream.Stream.Done():
				return
			case msg := <-c:
				m := ChatRoomGrainListenStreamMessage{
					Sender: msg.Sender,
				}
				val := new(ChatMessage)
				if err := msg.Decode(val); err != nil {
					m.Err = err
				} else {
					m.Value = val
				}
				select {
				case <-stream.Stream.Done():
					return
				case stream.c <- m:
				}
			}
		}
	}()

	return stream, nil
}

type ChatRoomGrainListenStreamMessage struct {
	Sender grain.Identity
	Value  *ChatMessage
	Err    error
}

type ChatRoomGrainListenStream struct {
	generic.Stream
	c chan ChatRoomGrainListenStreamMessage
}

func (s *ChatRoomGrainListenStream) C() <-chan ChatRoomGrainListenStreamMessage {
	return s.c
}
func (s *ChatRoomGrainListenStream) Observe(ctx context.Context, observable grain.Identity, req *ListenRequest) error {
	return s.Stream.GenericObserve(ctx, observable, req)
}

type ChatRoomGrainRef interface {
	grain.GrainReference
	Join(ctx context.Context, req *JoinRequest) (*JoinResponse, error)
	ObserveListen(ctx context.Context, observer grain.GrainReference, req *ListenRequest) error
	UnsubscribeListen(ctx context.Context, observer grain.GrainReference) error
	Publish(ctx context.Context, req *ChatMessage) (*PublishResponse, error)
	Leave(ctx context.Context, req *LeaveRequest) (*LeaveResponse, error)
}

var ChatRoomGrain_GrainDesc = descriptor.GrainDescription{
	GrainType: "ChatRoomGrain",
	Activation: descriptor.ActivationDesc{
		Handler: _ChatRoomGrain_Activate,
	},
	Methods: []descriptor.MethodDesc{
		{
			Name:    "Join",
			Handler: _ChatRoomGrain_Join_MethodHandler,
		},
		{
			Name:    "Publish",
			Handler: _ChatRoomGrain_Publish_MethodHandler,
		},
		{
			Name:    "Leave",
			Handler: _ChatRoomGrain_Leave_MethodHandler,
		},
	},
	Observables: []descriptor.ObservableDesc{
		{
			Name:               "Listen",
			Handler:            _ChatRoomGrain_Listen_ObserverHandler,
			RegisterHandler:    _ChatRoomGrain_Listen_RegisterObserverHandler,
			UnsubscribeHandler: _ChatRoomGrain_Listen_UnsubscribeObserverHandler,
		},
	},
}

func _ChatRoomGrain_Activate(activator interface{}, ctx context.Context, coreServices services.CoreGrainServices, observerManager services.GrainObserverManager, identity grain.Identity) (grain.GrainReference, error) {
	grainServices := &impl_ChatRoomGrainServices{
		observerManager: observerManager,
		coreServices:    coreServices,
	}
	return activator.(ChatRoomGrainActivator).Activate(ctx, identity, grainServices)
}

func _ChatRoomGrain_Join_MethodHandler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(JoinRequest)
	if err := dec(in); err != nil {
		return nil, err
	}

	return srv.(ChatRoomGrain).Join(ctx, in)
}

func _ChatRoomGrain_Listen_ObserverHandler(srv interface{}, ctx context.Context, dec func(interface{}) error) error {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return err
	}

	return srv.(ChatRoomGrainListenObserver).OnNotifyListen(ctx, in)
}
func _ChatRoomGrain_Listen_RegisterObserverHandler(srv interface{}, ctx context.Context, observer grain.Identity, registrationTimeout time.Duration, dec func(interface{}) error) error {
	in := new(ListenRequest)
	if err := dec(in); err != nil {
		return err
	}

	return srv.(ChatRoomGrain).RegisterListenObserver(ctx, observer, registrationTimeout, in)
}
func _ChatRoomGrain_Listen_UnsubscribeObserverHandler(srv interface{}, ctx context.Context, observer grain.Identity) error {
	return srv.(ChatRoomGrain).UnsubscribeListenObserver(ctx, observer)
}
func _ChatRoomGrain_Publish_MethodHandler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(ChatMessage)
	if err := dec(in); err != nil {
		return nil, err
	}

	return srv.(ChatRoomGrain).Publish(ctx, in)
}

func _ChatRoomGrain_Leave_MethodHandler(srv interface{}, ctx context.Context, dec func(interface{}) error) (interface{}, error) {
	in := new(LeaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}

	return srv.(ChatRoomGrain).Leave(ctx, in)
}

type _grainClient_ChatRoomGrain struct {
	grain.Identity
	siloClient grain.SiloClient
}

func GetChatRoomGrain(siloClient grain.SiloClient, identity grain.Identity) ChatRoomGrainRef {
	return &_grainClient_ChatRoomGrain{
		Identity:   identity,
		siloClient: siloClient,
	}
}

func (c *_grainClient_ChatRoomGrain) Join(ctx context.Context, req *JoinRequest) (*JoinResponse, error) {
	f := c.siloClient.InvokeMethod(ctx, c.Identity, ChatRoomGrain_GrainDesc.GrainType, ChatRoomGrain_GrainDesc.Methods[0].Name, req)
	resp, err := f.Await(ctx)
	if err != nil {
		return nil, err
	}
	out := new(JoinResponse)
	if err := resp.Get(out); err != nil {
		return nil, err
	}
	return out, nil
}
func (c *_grainClient_ChatRoomGrain) ObserveListen(ctx context.Context, observer grain.GrainReference, req *ListenRequest) error {
	f := c.siloClient.RegisterObserver(ctx, observer.GetIdentity(), c.GetIdentity(), ChatRoomGrain_GrainDesc.Observables[0].Name, req)
	err := f.Await(ctx)
	if err != nil {
		return err
	}
	return nil
}
func (c *_grainClient_ChatRoomGrain) UnsubscribeListen(ctx context.Context, observer grain.GrainReference) error {
	f := c.siloClient.UnsubscribeObserver(ctx, observer.GetIdentity(), c.GetIdentity(), ChatRoomGrain_GrainDesc.Observables[0].Name)
	err := f.Await(ctx)
	if err != nil {
		return err
	}
	return nil
}
func (c *_grainClient_ChatRoomGrain) Publish(ctx context.Context, req *ChatMessage) (*PublishResponse, error) {
	f := c.siloClient.InvokeMethod(ctx, c.Identity, ChatRoomGrain_GrainDesc.GrainType, ChatRoomGrain_GrainDesc.Methods[1].Name, req)
	resp, err := f.Await(ctx)
	if err != nil {
		return nil, err
	}
	out := new(PublishResponse)
	if err := resp.Get(out); err != nil {
		return nil, err
	}
	return out, nil
}
func (c *_grainClient_ChatRoomGrain) Leave(ctx context.Context, req *LeaveRequest) (*LeaveResponse, error) {
	f := c.siloClient.InvokeMethod(ctx, c.Identity, ChatRoomGrain_GrainDesc.GrainType, ChatRoomGrain_GrainDesc.Methods[2].Name, req)
	resp, err := f.Await(ctx)
	if err != nil {
		return nil, err
	}
	out := new(LeaveResponse)
	if err := resp.Get(out); err != nil {
		return nil, err
	}
	return out, nil
}
